import sqlite3
import time
from datetime import datetime

class graph_gen():
    def __init__(self):
        self.con = sqlite3.connect("histo_price.db")
        self.cur = self.con.cursor()

    def get_datas(self,symbol,dates_list):
        res = self.cur.execute("SELECT * FROM stat WHERE symbol='"+symbol+"' AND (time_zone ='"+
                               str(dates_list[1])+"' OR time_zone ='"+
                               str(dates_list[2])+"' OR time_zone ='"+
                               str(dates_list[3])+"' OR time_zone ='"+
                               str(dates_list[4])+"' OR time_zone ='"+
                               str(dates_list[5])+"' OR time_zone ='"+
                               str(dates_list[6])+"' OR time_zone ='"+
                               str(dates_list[7])+"' OR time_zone ='"+
                               str(dates_list[8])+"' OR time_zone ='"+
                               str(dates_list[9])+"' OR time_zone ='"+
                               str(dates_list[10])+"' OR time_zone ='"+
                               str(dates_list[11])+"' OR time_zone ='"+
                               str(dates_list[12])+"')")
        return res.fetchall()


def main():
    graph = graph_gen()
    fin = [2024,8]
    dates_list={}
    for i in range(12):
        if fin[1]-i>0:
            dates_list[12-i] = ([fin[0],fin[1]-i])
        else:
            dates_list[12-i] = ([fin[0]-1,fin[1]-i+12])
    #print(dates_list)
    #symbols = ["BTCEUR","BTCUSDT","ETHBTC","ETHUSDT","EURUSDT","PEPEEUR","XRPEUR"]
    symbols = ["BTCUSDT"]
    glob = {}
    for symbol in symbols:
        graph_result = graph.get_datas(symbol,dates_list)
        result_dico = {0:{},1:{},2:{},3:{},4:{},5:{},6:{},7:{},8:{},9:{}}
        for el in graph_result:
            result_dico[el[1]][el[6]]=[el[5],el[7]]
        
        keys = dates_list.keys()
        revert_dates_list = {}
        for key in keys:
            revert_dates_list[str(dates_list[key])]=key
        #print("revert : ")
        #print(revert_dates_list)
        result_dico_2 = {}
        for el in range(10):
            #print(result_dico[el])
            coef = 0
            nbr_step = 0
            for unit in result_dico[el]:
                #print(unit)
                #print(revert_dates_list[str(unit)])
                coef += result_dico[el][unit][0]*revert_dates_list[str(unit)]
                nbr_step += result_dico[el][unit][1]*revert_dates_list[str(unit)]
            result_dico_2[el] = [coef/78,nbr_step/78]
        print("\n######################")
        print(symbol)
        #print(result_dico_2)
        result_dico_2_percent = {}
        sum_coef=0
        for el in result_dico_2:
            #print(str(el)+" : "+str(result_dico_2[el]))
            sum_coef += result_dico_2[el][0]
        for el in result_dico_2:
            result_dico_2_percent[el] = [100*result_dico_2[el][0]/sum_coef,int(result_dico_2[el][1])]
            print(str(el)+" : "+str(result_dico_2_percent[el]))
        glob[symbol] = result_dico_2_percent
        #print(result_dico_2_percent)
        start_end = {}
        for el in graph_result:
            start_end[el[1]]=[el[2],el[3]]
        paire = input("Paire?")
        symbol
        montant = int(input("Montant capital client?"))
        capital_par_zone = {}
        print("\n\n")
        for el in result_dico_2_percent:
            capital_par_zone[el]= [montant*result_dico_2_percent[el][0]/100,result_dico_2_percent[el][1]]
            
        
        for el in capital_par_zone:
            if capital_par_zone[el][1]>0:
                print(str(el)+" : "+str(capital_par_zone[el]))
                ecart = (start_end[el][1]-start_end[el][0])/capital_par_zone[el][1]
                print("ecart : " + str(ecart))

        ID_bet = 0
        for el in capital_par_zone:
            if capital_par_zone[el][1]>0:
                ecart = (start_end[el][1]-start_end[el][0])/capital_par_zone[el][1]
                print("########## " + str(el)+" ############")
                for i in range(capital_par_zone[el][1]):
                    print(str(ID_bet)+";"+paire+";"+str(start_end[el][0] + i * ecart)+";"+str(capital_par_zone[el][0]/capital_par_zone[el][1]))
                    ID_bet +=1
        arrange = int(input("Arrangement (0/1) ? "))
        while arrange == 1:
            reduce_zone = int(input("Zone à réduire ? "))
            add_zone = int(input("Zone à augmenter ? "))
            bascule = int(input("Montant à basculer : "))
            capital_par_zone[reduce_zone][0] = capital_par_zone[reduce_zone][0] - bascule
            capital_par_zone[add_zone][0] = capital_par_zone[add_zone][0] + bascule
            ID_bet = 0
            for el in capital_par_zone:
                if capital_par_zone[el][1]>0:
                    ecart = (start_end[el][1]-start_end[el][0])/capital_par_zone[el][1]
                    print("########## " + str(el)+" ############")
                    for i in range(capital_par_zone[el][1]):
                        print(str(ID_bet)+";"+paire+";"+str(start_end[el][0] + i * ecart)+";"+str(capital_par_zone[el][0]/capital_par_zone[el][1]))
                        ID_bet +=1
            arrange = int(input("Arrangement (0/1) ? "))

        print("FIN")
        ID_bet = 0
        for el in capital_par_zone:
            if capital_par_zone[el][1]>0:
                ecart = (start_end[el][1]-start_end[el][0])/capital_par_zone[el][1]
                for i in range(capital_par_zone[el][1]):
                    limite = int(start_end[el][0] + i * ecart)
                    cap_base = capital_par_zone[el][0]/capital_par_zone[el][1]
                    print(str(ID_bet)+","+paire+","+str(limite)+","+str(cap_base/limite))
                    ID_bet +=1

        create_file = int(input("Créer le fichier (0/1) ? "))
        if create_file:
            ID_bet = 0
            fichier_graph = open(paire+".csv", "w")
            for el in capital_par_zone:
                if capital_par_zone[el][1]>0:
                    ecart = (start_end[el][1]-start_end[el][0])/capital_par_zone[el][1]
                    for i in range(capital_par_zone[el][1]):
                        limite = int(start_end[el][0] + i * ecart)
                        cap_base = capital_par_zone[el][0]/capital_par_zone[el][1]
                        fichier_graph.write(str(ID_bet)+","+paire+","+str(limite)+","+str('%.7f' % float(cap_base/limite))+"\n")
                        ID_bet +=1
        

    #        print(el)





    #res = graph.start_end_date_time_stamp([2021,5])

    #print(len(graph.get_all_between_dates("BTCUSDT",res[0],res[1])))



if __name__ == '__main__':
     main()